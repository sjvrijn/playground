name: pytest --last-failed

on:
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest
   
    steps:
    # Setup
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        pip install pytest


    # Initial restore of cache, if it exists
    - uses: actions/cache/restore@v3
      id: cache
      with:
        path: .pytest_cache
        key: pytest-cache-${{github.event.number}}
        restore-keys:
          pytest-cache-${{github.event.number}}-
    # Determine if pytests's lastfailed cache contains any entries
    - name: Check cache length
      run: |
        echo "CACHE_OUTPUT_LENGTH=$( pytest --collect-only -qqq --no-header --no-summary --cache-show cache/lastfailed | sed -n '4 p' | wc -c )" >> "$GITHUB_ENV"

    # If some tests previously failed, i.e., a non-empty cache exists, run pytest --last-failed
    - name: Run only --last-failed
      id: last_failed
      if: |
        always() &&
        env.CACHE_OUTPUT_LENGTH > 5
      run: |
        pytest --last-failed

    # If 'pytest --last-failed' was skipped (i.e. no entries in cache), or succeeded
    # (i.e. last-failed tests pass again), run all tests with a clean cache
    - name: Run all tests
      id: all_tests
      if: |
        always() &&
        ( steps.last_failed.outcome == 'success' || steps.last_failed.outcome == 'skipped' )
      run: |
        pytest --cache-clear

    # debug: display outcome of steps
    - name: (debug) display outcomes
      if: always()
      run: echo "${{ steps.last_failed.outcome }} ${{ steps.all_tests.outcome }}"

    # Save pytest cache for future runs
    - name: Update pytest cache
      uses: actions/cache/save@v3
      if: always()
      with:
        path: .pytest_cache
        key: pytest-cache-${{github.event.number}}-${{github.run_id}}
